name: Bunnyshell - Deploy Preview Environment
on:
  workflow_run:
    workflows:
      - "Bunnyshell - Prepare Preview Environment Configuration"
    types:
      - completed
permissions:
  pull-requests: write
jobs:
  load-artifact-from-reusable:
    name: Load artifact values
    uses: bunnyshell/workflows/.github/workflows/load-artifact.yaml@v2
    with:
      workflow_run_id: ${{ github.event.workflow_run.id }}

  deploy:
    name: Deploy Environment
    needs: load-artifact-from-reusable
    uses: bunnyshell/workflows/.github/workflows/deploy-env.yaml@v2
    concurrency: bns-deploy-${{ needs.load-artifact-from-reusable.outputs.pr-number }}
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.load-artifact-from-reusable.outputs.skip-deployment == 'false' }}
    with:
      pr-number: ${{ needs.load-artifact-from-reusable.outputs.pr-number }}
      project-id: ${{ vars.BUNNYSHELL_PROJECT_ID }}
      cluster-id: ${{ vars.BUNNYSHELL_CLUSTER_ID }}
      env-name: 'Demo PR #${{ needs.load-artifact-from-reusable.outputs.pr-number }}'
      bunnyshell-yaml-contents: "kind: Environment\nname: preview\ntype: primary\nurlHandle: previewjoeylevi\ncomponents:\n    -\n        kind: Application\n        name: application\n        gitRepo: 'https://github.com/Joeyvs/devops.git'\n        gitBranch: main\n        gitApplicationPath: application\n        dockerCompose:\n            build:\n                context: ./application\n                dockerfile: dockerfile.prod\n            deploy: {  }\n            environment:\n                MESSAGE_QUEUE: 'amqp://devops-messagebus'\n                MONGO_URL: 'mongodb://admin:admin@devops-db:27017'\n            ports:\n                - '3000:3000'\n        hosts:\n            -\n                hostname: 'application-{{ env.base_domain }}'\n                path: /\n                servicePort: 3000\n    -\n        kind: Database\n        name: database\n        dockerCompose:\n            environment:\n                MONGO_INITDB_DATABASE: devops-db\n                MONGO_INITDB_ROOT_PASSWORD: admin\n                MONGO_INITDB_ROOT_USERNAME: admin\n            image: 'mongo:latest'\n            restart: always\n            ports:\n                - '27017:27017'\n        volumes:\n            -\n                name: app-data\n                mount: /data/db\n                subPath: ''\n    -\n        kind: Database\n        name: logdatabase\n        dockerCompose:\n            environment:\n                MONGO_INITDB_DATABASE: devops-logs\n                MONGO_INITDB_ROOT_PASSWORD: admin\n                MONGO_INITDB_ROOT_USERNAME: admin\n            image: 'mongo:latest'\n            restart: always\n            ports:\n                - '27017:27017'\n        volumes:\n            -\n                name: log-data\n                mount: /data/db\n                subPath: ''\n    -\n        kind: Application\n        name: logging\n        gitRepo: 'https://github.com/Joeyvs/devops.git'\n        gitBranch: main\n        gitApplicationPath: logging\n        dockerCompose:\n            build:\n                context: ./logging\n                dockerfile: dockerfile.prod\n            deploy: {  }\n            environment:\n                MESSAGE_QUEUE: 'amqp://devops-messagebus'\n                MONGO_URL: 'mongodb://admin:admin@devops-logs:27017'\n    -\n        kind: Service\n        name: messagebus\n        dockerCompose:\n            healthcheck:\n                test:\n                    - CMD\n                    - rabbitmqctl\n                    - status\n                timeout: 10s\n                interval: 30s\n                retries: 5\n            image: 'rabbitmq:latest'\n            ports:\n                - '5672:5672'\n                - '15672:15672'\n        hosts:\n            -\n                hostname: 'messagebus-{{ env.base_domain }}'\n                path: /\n                servicePort: 5672\nvolumes:\n    -\n        name: app-data\n        size: 1Gi\n        type: disk\n    -\n        name: log-data\n        size: 1Gi\n        type: disk\n"
      comment-on-pr: true
    secrets:
      bunnyshell-access-token: ${{ secrets.BUNNYSHELL_ACCESS_TOKEN }}
